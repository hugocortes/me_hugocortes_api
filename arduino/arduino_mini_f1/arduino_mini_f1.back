// Created by: Hugo Cortes

#include "RF24.h"
#include "printf.h"
#include "DHT.h"
#include <SPI.h>

// DEFINE PINS
#define RF_CE 8
#define RF_CSN 10
#define DHT_DATA 9

#define DHT_TYPE DHT22 // AM2302 temp sensor

// API CMD VALUES
#define GET_PIN 1
#define PUT_PIN 2
#define GET_SENSOR 3

// API SENSOR VALUES
#define TEMP_SENS 1
#define HUMID_SENS 2
#define HEAT_SENS 3

// API STATUS VALUES
#define NA 255
#define SUCCESS 1
#define FAIL 0

// NODE ID
#define NODE_M 0
#define NODE_F1 1

// NODE PIPES
#define NODE_PIPE_1 1

// VALUES
#define ON 1
#define OFF 0

// Payload packet structs
struct payload_in_t{
  uint8_t cmd_t;
  uint8_t pin_t;
  uint8_t pin_val_t;
  uint8_t sens_t;
};

struct payload_out_t{
  uint8_t status_t;
  uint8_t pin_t;
  uint8_t pin_val_t;
  uint8_t sens_t;
  float sens_val_t;
};

DHT dht(DHT_DATA, DHT_TYPE);
RF24 radio(RF_CE, RF_CSN);
byte addresses[][6] = {"1Node","2Node"};

void setup() {
  setup_rf_radio();
  //debug();
  setup_pins();
}

void loop() {
  if(radio.available()){
    payload_out_t payload_out;
    payload_in_t payload_in;
    radio.read(&payload_in, sizeof(payload_in) );
    switch(payload_in.cmd_t){
      case GET_PIN:
        get_pin(payload_in, payload_out);
        break;
      case PUT_PIN:
        put_pin(payload_in, payload_out);
        break;
      case GET_SENSOR:
        get_sensor(payload_in, payload_out);
        break;
      default:
        payload_out.status_t = FAIL;
        send_packet(payload_out);
        break;
    }
  }
}

void get_pin(payload_in_t payload_in, payload_out_t payload_out){
  switch(payload_in.pin_t){
    case 2:
    case 3:
    case 4:
    case 5:
      payload_out.status_t = SUCCESS;
      payload_out.pin_t = payload_in.pin_t;
      payload_out.pin_val_t = digitalRead(payload_in.pin_t);
      break;
    default:
      payload_out.status_t = FAIL;
      break;
  }
  send_packet(payload_out);
}

void put_pin(payload_in_t payload_in, payload_out_t payload_out){
  switch(payload_in.pin_t){
    case 2:
    case 3:
    case 4:
    case 5:
      digitalWrite(payload_in.pin_t, payload_in.pin_val_t > 0);
      payload_out.status_t = SUCCESS;
      break;
    default:
      payload_out.status_t = FAIL;
      break;
  }
  send_packet(payload_out);
}

void get_sensor(payload_in_t payload_in, payload_out_t payload_out){
  bool read = false;
  float data = 0;
  float f = 0;
  float h = 0;
  switch(payload_in.sens_t){

    case TEMP_SENS:
      for(int _ = 0; _ < 3 && !read; _++){
        data = dht.readTemperature(true); // Read as Fahrenheit
        if(!isnan(data)) read = true;
      }
      payload_out = eval_sensor_data(read, data);
      payload_out.sens_t = TEMP_SENS;
      break;

    case HUMID_SENS:
      for(int _ = 0; _ < 3 && !read; _++){
        data = dht.readHumidity();
        if(!isnan(data)) read = true;
      }
      payload_out = eval_sensor_data(read, data);
      payload_out.sens_t = HUMID_SENS;
      break;

    case HEAT_SENS:
      for(int _ = 0; _ < 3 && !read; _++){
        h = dht.readHumidity();
        f = dht.readTemperature(true);
        if(!isnan(h) && !isnan(f)) read = true;
      }
      if(read) data = dht.computeHeatIndex(f,h);
      payload_out = eval_sensor_data(read, data);
      payload_out.sens_t = HEAT_SENS;
      break;

    default:
      payload_out.status_t = FAIL;
      break;
  }
  send_packet(payload_out);
}

payload_out_t eval_sensor_data(bool status, float data){
  payload_out_t out;
  if(status){
    out.status_t = SUCCESS;
    out.sens_val_t = data;
  }
  else out.status_t = FAIL;
  return out;
}

void send_packet(payload_out_t payload_out){
  radio.stopListening();
  radio.write(&payload_out,sizeof(payload_out));
  radio.startListening();
}

void setup_rf_radio(void){
  radio.begin();                          // Start up the radio
  radio.setAutoAck(1);                    // Ensure autoACK is enabled
  radio.setRetries(15,15);                // Max delay between retries & number of retries
  radio.setPALevel(RF24_PA_MAX);
  // Set up nodes
  radio.openWritingPipe(addresses[NODE_F1]);
  radio.openReadingPipe(NODE_PIPE_1, addresses[NODE_M]);
    
  radio.startListening();                 // Start listening
}

void setup_pins(void){
  // SETTING UP AS RANDOM PINS FOR NOW.
  // Future use will be for relays
  pinMode(2, OUTPUT); 
  digitalWrite(2, HIGH);

  pinMode(3, OUTPUT); 
  digitalWrite(3, LOW);

  pinMode(4, OUTPUT); 
  digitalWrite(4, HIGH);

  pinMode(5, OUTPUT); 
  digitalWrite(5, LOW);
}

void debug(void){
  // Debug
  Serial.begin(115200);
  printf_begin();
  radio.printDetails();
}
